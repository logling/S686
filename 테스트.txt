11개 수동으로 놓기
class Program
{
    static void Main()
    {
        Console.WriteLine("initializing...");
        
        Program program = new Program();

        int pieceNum = 11;
        Board board = new Board(pieceNum);

        Console.WriteLine($"Size = {board.Size}, N = {board.N}");

        Piece piece1 = new Piece("pawn", 2, 1);
        Piece piece2 = new Piece("pawn", 5, 1);
        Piece piece3 = new Piece("knight", 0, 1);
        Piece piece4 = new Piece("knight", 0, 2);
        Piece piece5 = new Piece("knight", 4, 2);
        Piece piece6 = new Piece("knight", 1, 5);
        Piece piece7 = new Piece("bishop", 2, 3);
        Piece piece8 = new Piece("bishop", 2, 4);
        Piece piece9 = new Piece("bishop", 3, 0);
        Piece piece10 = new Piece("rook", 4, 3);
        Piece piece11 = new Piece("rook", 4, 4);
        board.RegisterPiece(piece1);
        board.RegisterPiece(piece2);
        board.RegisterPiece(piece3);
        board.RegisterPiece(piece4);
        board.RegisterPiece(piece5);
        board.RegisterPiece(piece6);
        board.RegisterPiece(piece7);
        board.RegisterPiece(piece8);
        board.RegisterPiece(piece9);
        board.RegisterPiece(piece10);
        board.RegisterPiece(piece11);
        
        PuzzleGenerator agent = new PuzzleGenerator();
        (bool tf, List<Move> key) = agent.PuzzleSolver(board);
        Console.WriteLine(tf);
        for (int i = 0; i < key.Count; i++)
        {
            Move move = key[i];
            Console.WriteLine($"Move {i + 1}: ({move.i.x}, {move.i.y}) -> ({move.f.x}, {move.f.y})");
        }
    }

    private void printGrid(Board board)
    {
        Console.WriteLine("printing grid...");
        int count = 0;

        for (int i = 0; i < board.Size; i++)
        {
            for (int j = 0; j < board.Size; j++)
            {
                if (board.Grid[i, j] != null)
                {
                    Console.WriteLine($"Piece at ({i}, {j}): {board.Grid[i, j]?.pieceType}");
                    count++;
                }
            }
        }

        if (count == 0)
            Console.WriteLine("no piece");
    }

    private void generatePiece(Board board)
    {
        Random rand = new Random();
        Piece piece = new Piece("pawn", rand.Next(board.Size), rand.Next(board.Size));
        Console.WriteLine($"new piece {piece.pieceType}, at ({piece.x},{piece.y})");
        board.RegisterPiece(piece);
    }
}


조합 경우의 수
    static void Main()
    {
        int rep = 0;
        int pieceNum = 8;
        Program p = new Program();
        int[] current = new int[pieceNum]; // pieceNum
        int[] count = new int[6]; // pieceTypes
        p.Generate(0, pieceNum, current, count, ref rep); // pieceNum
        Console.WriteLine(rep);
    }

    private void Generate(int depth, int maxDepth, int[] current, int[] count, ref int rep)
    {
        if (depth == maxDepth)
        {
            Console.WriteLine(string.Join(", ", current));
            rep++;
            return;
        }

        for (int i = 0; i < 6; i++)
        {
            if ((i == 0 || i == 1) && count[i] < 1 || (i == 2 && count[i] < 2) || (i == 3 && count[i] < 2) || (i == 4 && count[i] < 2) || (i == 5 && count[i] < 2))
            {
                current[depth] = i;
                count[i]++;
                Generate(depth + 1, maxDepth, current, count, ref rep);
                count[i]--;
            }
        }
    }


수분할
    public List<List<int>> GetAllPartitions(int n)
    {
        List<List<int>> result = new List<List<int>>();
        PartitionRecursion(n, n, new List<int>(), result);
        SortPartitions(result);
        PrintPartitions(result);
        return result;
    }

    private void PartitionRecursion(int n, int max, List<int> current, List<List<int>> result)
    {
        if (n == 0)
        {
            result.Add(new List<int>(current));
            return;
        }

        for (int i = Math.Min(max, n); i >= 1; i--)
        {
            current.Add(i);
            PartitionRecursion(n - i, i, current, result);
            current.RemoveAt(current.Count - 1);
        }
    }

    private void SortPartitions(List<List<int>> partitions)
    {
        foreach (var partition in partitions)
        {
            partition.Sort((a, b) => b.CompareTo(a));
        }
    }

    private void PrintPartitions(List<List<int>> partitions)

    static void Main()
    {
        PuzzleGenerator p = new PuzzleGenerator();
        List<List<int>> partitions = p.GetAllPartitions(11);
    }
